# evaluate the map generated by SLAM against the true map
import ast
import numpy as np
import json
import matplotlib.pyplot as plt

def parse_groundtruth(fname : str) -> dict:
    with open(fname, 'r') as f:
        try:
            gt_dict = json.load(f)                   
        except ValueError as e:
            with open(fname, 'r') as f:
                gt_dict = ast.literal_eval(f.readline()) 
        
        aruco_dict = {}
        for key in gt_dict:
            if key.startswith("aruco"):
                aruco_num = int(key.strip('aruco')[:-2])
                aruco_dict[aruco_num] = np.reshape([gt_dict[key]["x"], gt_dict[key]["y"]], (2,1))
    return aruco_dict

def parse_user_map(fname : str) -> dict:
    with open(fname, 'r') as f:
        try:
            usr_dict = json.load(f)                   
        except ValueError as e:
            with open(fname, 'r') as f:
                usr_dict = ast.literal_eval(f.readline()) 
        aruco_dict = {}
        for (i, tag) in enumerate(usr_dict["taglist"]):
            aruco_dict[tag] = np.reshape([usr_dict["map"][0][i],usr_dict["map"][1][i]], (2,1))
    return aruco_dict

def match_aruco_points(aruco0 : dict, aruco1 : dict):
    points0 = []
    points1 = []
    extra_points = []
    keys = []
    extra_keys = []
    for key in aruco0:  # run through estimated aruco
        if key not in aruco1:  # skip those that don't have ground truth
            extra_points.append(aruco0[key])
            extra_keys.append(key)
            continue

        # matching key and points
        points0.append(aruco0[key])
        points1.append(aruco1[key])
        keys.append(key)

    if len(extra_points) > 0:
        extra_points = np.hstack(extra_points)
    else:
        extra_points = None

    return keys, extra_keys, np.hstack(points0), np.hstack(points1), extra_points

def solve_umeyama2d(points1, points2):
    # Solve the optimal transform such that
    # R(theta) * p1_i + t = p2_i

    assert(points1.shape[0] == 2)
    assert(points1.shape[0] == points2.shape[0])
    assert(points1.shape[1] == points2.shape[1])


    # Compute relevant variables
    num_points = points1.shape[1]
    mu1 = 1/num_points * np.reshape(np.sum(points1, axis=1),(2,-1))
    mu2 = 1/num_points * np.reshape(np.sum(points2, axis=1),(2,-1))
    sig1sq = 1/num_points * np.sum((points1 - mu1)**2.0)
    sig2sq = 1/num_points * np.sum((points2 - mu2)**2.0)
    Sig12 = 1/num_points * (points2-mu2) @ (points1-mu1).T

    # Use the SVD for the rotation
    U, d, Vh = np.linalg.svd(Sig12)
    S = np.eye(2)
    if np.linalg.det(Sig12) < 0:
        S[-1,-1] = -1
    
    # Return the result as an angle and a 2x1 vector
    R = U @ S @ Vh
    theta = np.arctan2(R[1,0],R[0,0])
    x = mu2 - R @ mu1

    return theta, x

def apply_transform(theta, x, points):
    # Apply an SE(2) transform to a set of 2D points
    assert(points.shape[0] == 2)
    
    c, s = np.cos(theta), np.sin(theta)
    R = np.array(((c, -s), (s, c)))

    points_transformed =  R @ points + x
    return points_transformed


def compute_rmse(points1, points2):
    # Compute the RMSE between two matched sets of 2D points.
    assert(points1.shape[0] == 2)
    assert(points1.shape[0] == points2.shape[0])
    assert(points1.shape[1] == points2.shape[1])
    num_points = points1.shape[1]
    residual = (points1-points2).ravel()
    MSE = 1.0/num_points * np.sum(residual**2)

    return np.sqrt(MSE)

def display_stats_plot(us_vec, gt_vec, extra_vec, us_vec_aligned, extra_vec_aligned, taglist, extra_taglist, theta, x):
    diff = gt_vec - us_vec_aligned
    rmse = compute_rmse(us_vec, gt_vec)
    rmse_aligned = compute_rmse(us_vec_aligned, gt_vec)

    print()
    print("The following parameters optimally transform the estimated points to the ground truth.")
    print("Rotation Angle: {}".format(theta))
    print("Translation Vector: ({}, {})".format(x[0, 0], x[1, 0]))

    print()
    print("Number of found markers: {}".format(len(taglist)))
    print("RMSE before alignment: {}".format(rmse))
    print("RMSE after alignment:  {}".format(rmse_aligned))

    print()
    print('%s %7s %9s %7s %11s %9s %7s' % ('Marker', 'Real x', 'Pred x', 'Δx', 'Real y', 'Pred y', 'Δy'))
    print('-----------------------------------------------------------------')
    for i in range(len(taglist)):
        print('%3d %9.2f %9.2f %9.2f %9.2f %9.2f %9.2f\n' % (
        taglist[i], gt_vec[0][i], us_vec_aligned[0][i], diff[0][i], gt_vec[1][i], us_vec_aligned[1][i], diff[1][i]))

    ax = plt.gca()
    ax.scatter(gt_vec[0, :], gt_vec[1, :], marker='o', color='C0', s=100)
    ax.scatter(us_vec_aligned[0, :], us_vec_aligned[1, :], marker='x', color='C1', s=100)
    if extra_vec is not None:
        ax.scatter(extra_vec_aligned[0, :], extra_vec_aligned[1, :], marker='x', color='C1', s=100)
    for i in range(len(taglist)):
        ax.text(gt_vec[0, i] + 0.05, gt_vec[1, i] + 0.05, taglist[i], color='C0', size=12)
        ax.text(us_vec_aligned[0, i] + 0.05, us_vec_aligned[1, i] + 0.05, taglist[i], color='C1', size=12)

    if extra_vec is not None:
        for i in range(len(extra_taglist)):
            ax.text(extra_vec_aligned[0, i] + 0.05, extra_vec_aligned[1, i] + 0.05, extra_taglist[i], color='C1',
                    size=12)
    plt.title('Arena')
    plt.xlabel('X')
    plt.ylabel('Y')
    ax.set_xticks([-1.6, -1.2, -0.8, -0.4, 0, 0.4, 0.8, 1.2, 1.6])
    ax.set_yticks([-1.6, -1.2, -0.8, -0.4, 0, 0.4, 0.8, 1.2, 1.6])
    plt.legend(['Real', 'Pred'])
    plt.grid()
    plt.show()



if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser("Matching the estimated map and the true map")
    parser.add_argument("groundtruth", type=str, help="The ground truth file name.")
    parser.add_argument("estimate", type=str, help="The estimate file name.")
    args = parser.parse_args()

    gt_aruco = parse_groundtruth(args.groundtruth)
    us_aruco = parse_user_map(args.estimate)

    # print(gt_aruco.shape)

    taglist, extra_taglist, us_vec, gt_vec, extra_vec = match_aruco_points(us_aruco, gt_aruco)
    idx = np.argsort(taglist)
    taglist = np.array(taglist)[idx]
    us_vec = us_vec[:,idx]
    gt_vec = gt_vec[:, idx]

    theta, x = solve_umeyama2d(us_vec, gt_vec)
    # us_vec_all = np.concatenate((us_vec, extra_vec), axis=1)
    us_vec_aligned = apply_transform(theta, x, us_vec)
    if extra_vec is not None:
        extra_vec_aligned = apply_transform(theta, x, extra_vec)
    else:
        extra_vec_aligned = None

    display_stats_plot(us_vec, gt_vec, extra_vec, us_vec_aligned, extra_vec_aligned, taglist, extra_taglist, theta, x)

    # generate aligned truemap
    aligned_aruco = {}
    for i in range(us_vec_aligned.shape[1]):
        aligned_aruco[f"aruco{taglist[i]}_0"] = {'x': us_vec_aligned[0, i], 'y': us_vec_aligned[1, i]}

    for j in range(extra_vec_aligned.shape[1]):
        aligned_aruco[f"aruco{extra_taglist[j]}_0"] = {'x': extra_vec_aligned[0, j], 'y': extra_vec_aligned[1, j]}

    with open('TRUEMAP_ALIGNED.txt', 'w') as file:
        json.dump(aligned_aruco, file, indent=4)